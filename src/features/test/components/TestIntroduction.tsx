'use client';

import React, { useState, useEffect } from 'react';
import {
  Container,
  Typography,
  Box,
  Button,
  Card,
  CardContent,
  Grid,
  Chip,
  CircularProgress,
  List,
  ListItem,
  ListItemIcon,
  ListItemText,
  Divider,
  Alert,
} from '@mui/material';
import {
  Psychology,
  Timer,
  QuestionAnswer,
  CheckCircle,
  Info,
  TrendingUp,
  Work,
  Group,
} from '@mui/icons-material';
import { useRouter } from 'next/navigation';
import { testService, QuestionStats } from '../services/testService';

export const TestIntroduction: React.FC = () => {
  const router = useRouter();
  const [stats, setStats] = useState<QuestionStats | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    const fetchStats = async () => {
      try {
        const questionStats = await testService.getQuestionStats();
        setStats(questionStats);
      } catch (err) {
        setError('Kh√¥ng th·ªÉ t·∫£i th√¥ng tin b√†i test. Vui l√≤ng th·ª≠ l·∫°i.');
        console.error('Error fetching question stats:', err);
      } finally {
        setLoading(false);
      }
    };

    fetchStats();
  }, []);

  const handleStartTest = async () => {
    // Ki·ªÉm tra tr·∫°ng th√°i ƒëƒÉng nh·∫≠p tr∆∞·ªõc khi b·∫Øt ƒë·∫ßu test
    try {
      const response = await fetch('/api/auth/me');
      const isLoggedIn = response.ok;
      
      // L∆∞u tr·∫°ng th√°i ƒëƒÉng nh·∫≠p v√†o sessionStorage
      if (isLoggedIn) {
        sessionStorage.setItem('wasGuestUser', 'false');
        console.log('üîë User is logged in, will require manual save');
      } else {
        sessionStorage.setItem('wasGuestUser', 'true');
        console.log('üë§ User is guest, will auto-save after login');
      }
    } catch {
      // N·∫øu kh√¥ng th·ªÉ ki·ªÉm tra, m·∫∑c ƒë·ªãnh l√† guest user
      sessionStorage.setItem('wasGuestUser', 'true');
      console.log('üë§ Cannot check auth status, defaulting to guest user');
    }
    
    router.push('/test/questions');
  };

  const categoryDescriptions = {
    EI: { name: 'H∆∞·ªõng ngo·∫°i - H∆∞·ªõng n·ªôi', description: 'ƒê√°nh gi√° ngu·ªìn nƒÉng l∆∞·ª£ng v√† c√°ch t∆∞∆°ng t√°c' },
    SN: { name: 'C·∫£m gi√°c - Tr·ª±c gi√°c', description: 'ƒê√°nh gi√° c√°ch thu th·∫≠p th√¥ng tin' },
    TF: { name: 'T∆∞ duy - C·∫£m x√∫c', description: 'ƒê√°nh gi√° c√°ch ƒë∆∞a ra quy·∫øt ƒë·ªãnh' },
    JP: { name: 'Ph√°n ƒëo√°n - Nh·∫≠n th·ª©c', description: 'ƒê√°nh gi√° l·ªëi s·ªëng v√† c√°ch t·ªï ch·ª©c' },
  };

  if (loading) {
    return (
      <Container maxWidth="md" sx={{ py: 8 }}>
        <Box display="flex" justifyContent="center" alignItems="center" minHeight="60vh">
          <CircularProgress />
        </Box>
      </Container>
    );
  }

  if (error) {
    return (
      <Container maxWidth="md" sx={{ py: 8 }}>
        <Alert severity="error" sx={{ mb: 4 }}>
          {error}
        </Alert>
        <Button variant="contained" onClick={() => window.location.reload()}>
          Th·ª≠ l·∫°i
        </Button>
      </Container>
    );
  }

  return (
    <Container maxWidth="md" sx={{ py: 8 }}>
      {/* Header */}
      <Box textAlign="center" mb={6}>
        <Psychology sx={{ fontSize: 64, color: 'primary.main', mb: 2 }} />
        <Typography variant="h3" component="h1" gutterBottom fontWeight="bold">
          B√†i Ki·ªÉm Tra T√≠nh C√°ch MBTI
        </Typography>
        <Typography variant="h6" color="text.secondary" paragraph>
          Kh√°m ph√° t√≠nh c√°ch v√† t√¨m hi·ªÉu ngh·ªÅ nghi·ªáp ph√π h·ª£p v·ªõi b·∫°n
        </Typography>
      </Box>

      {/* Test Overview */}
      <Card sx={{ mb: 4 }}>
        <CardContent>
          <Typography variant="h5" gutterBottom>
            <Info sx={{ mr: 1, verticalAlign: 'middle' }} />
            Th√¥ng tin v·ªÅ b√†i test
          </Typography>
          
          <Grid container spacing={3} sx={{ mt: 2 }}>
            <Grid item xs={12} sm={4}>
              <Box textAlign="center">
                <QuestionAnswer sx={{ fontSize: 48, color: 'primary.main', mb: 1 }} />
                <Typography variant="h4" fontWeight="bold">
                  {stats?.totalQuestions || 0}
                </Typography>
                <Typography variant="body2" color="text.secondary">
                  C√¢u h·ªèi
                </Typography>
              </Box>
            </Grid>
            
            <Grid item xs={12} sm={4}>
              <Box textAlign="center">
                <Timer sx={{ fontSize: 48, color: 'warning.main', mb: 1 }} />
                <Typography variant="h4" fontWeight="bold">
                  {stats?.estimatedTime || 0}
                </Typography>
                <Typography variant="body2" color="text.secondary">
                  Ph√∫t (∆∞·ªõc t√≠nh)
                </Typography>
              </Box>
            </Grid>
            
            <Grid item xs={12} sm={4}>
              <Box textAlign="center">
                <TrendingUp sx={{ fontSize: 48, color: 'success.main', mb: 1 }} />
                <Typography variant="h4" fontWeight="bold">
                  16
                </Typography>
                <Typography variant="body2" color="text.secondary">
                  Lo·∫°i t√≠nh c√°ch
                </Typography>
              </Box>
            </Grid>
          </Grid>
        </CardContent>
      </Card>

      {/* Question Categories */}
      <Card sx={{ mb: 4 }}>
        <CardContent>
          <Typography variant="h5" gutterBottom>
            <Group sx={{ mr: 1, verticalAlign: 'middle' }} />
            C√°c nh√≥m c√¢u h·ªèi
          </Typography>
          <Typography variant="body2" color="text.secondary" paragraph>
            B√†i test ƒë∆∞·ª£c chia th√†nh 4 nh√≥m ch√≠nh ƒë·ªÉ ƒë√°nh gi√° c√°c kh√≠a c·∫°nh kh√°c nhau c·ªßa t√≠nh c√°ch:
          </Typography>
          
          <Grid container spacing={2} sx={{ mt: 1 }}>
            {Object.entries(categoryDescriptions).map(([key, category]) => (
              <Grid item xs={12} sm={6} key={key}>
                <Box display="flex" alignItems="center" mb={1}>
                  <Chip
                    label={`${stats?.categories[key as keyof typeof stats.categories] || 0} c√¢u`}
                    size="small"
                    color="primary"
                    sx={{ mr: 2 }}
                  />
                  <Typography variant="subtitle2" fontWeight="bold">
                    {category.name}
                  </Typography>
                </Box>
                <Typography variant="body2" color="text.secondary">
                  {category.description}
                </Typography>
              </Grid>
            ))}
          </Grid>
        </CardContent>
      </Card>

      {/* Instructions */}
      <Card sx={{ mb: 4 }}>
        <CardContent>
          <Typography variant="h5" gutterBottom>
            <CheckCircle sx={{ mr: 1, verticalAlign: 'middle' }} />
            H∆∞·ªõng d·∫´n l√†m b√†i
          </Typography>
          
          <List>
            <ListItem>
              <ListItemIcon>
                <CheckCircle color="success" />
              </ListItemIcon>
              <ListItemText 
                primary="Tr·∫£ l·ªùi th√†nh th·∫≠t"
                secondary="Ch·ªçn c√¢u tr·∫£ l·ªùi ph·∫£n √°nh ƒë√∫ng nh·∫•t t√≠nh c√°ch t·ª± nhi√™n c·ªßa b·∫°n"
              />
            </ListItem>
            
            <ListItem>
              <ListItemIcon>
                <CheckCircle color="success" />
              </ListItemIcon>
              <ListItemText 
                primary="Kh√¥ng c√≥ c√¢u tr·∫£ l·ªùi ƒë√∫ng sai"
                secondary="M·ªói l·ª±a ch·ªçn ƒë·ªÅu c√≥ gi√° tr·ªã ri√™ng v√† ph·∫£n √°nh kh√≠a c·∫°nh kh√°c nhau c·ªßa t√≠nh c√°ch"
              />
            </ListItem>
            
            <ListItem>
              <ListItemIcon>
                <CheckCircle color="success" />
              </ListItemIcon>
              <ListItemText 
                primary="D√†nh ƒë·ªß th·ªùi gian"
                secondary="ƒê·ªçc k·ªπ c√¢u h·ªèi v√† suy nghƒ© tr∆∞·ªõc khi ch·ªçn ƒë√°p √°n"
              />
            </ListItem>
            
            <ListItem>
              <ListItemIcon>
                <CheckCircle color="success" />
              </ListItemIcon>
              <ListItemText 
                primary="M√¥i tr∆∞·ªùng y√™n tƒ©nh"
                secondary="T√¨m n∆°i y√™n tƒ©nh ƒë·ªÉ t·∫≠p trung ho√†n to√†n v√†o b√†i test"
              />
            </ListItem>
          </List>
        </CardContent>
      </Card>

      {/* Benefits */}
      <Card sx={{ mb: 6 }}>
        <CardContent>
          <Typography variant="h5" gutterBottom>
            <Work sx={{ mr: 1, verticalAlign: 'middle' }} />
            B·∫°n s·∫Ω nh·∫≠n ƒë∆∞·ª£c g√¨?
          </Typography>
          
          <List>
            <ListItem>
              <ListItemIcon>
                <Psychology color="primary" />
              </ListItemIcon>
              <ListItemText 
                primary="Ph√¢n t√≠ch t√≠nh c√°ch chi ti·∫øt"
                secondary="Hi·ªÉu r√µ ƒëi·ªÉm m·∫°nh, ƒëi·ªÉm y·∫øu v√† ƒë·∫∑c ƒëi·ªÉm t√≠nh c√°ch c·ªßa b·∫°n"
              />
            </ListItem>
            
            <ListItem>
              <ListItemIcon>
                <Work color="primary" />
              </ListItemIcon>
              <ListItemText 
                primary="G·ª£i √Ω ngh·ªÅ nghi·ªáp ph√π h·ª£p"
                secondary="Danh s√°ch c√°c ngh·ªÅ nghi·ªáp ph√π h·ª£p v·ªõi t√≠nh c√°ch v√† nƒÉng l·ª±c c·ªßa b·∫°n"
              />
            </ListItem>
            
            <ListItem>
              <ListItemIcon>
                <TrendingUp color="primary" />
              </ListItemIcon>
              <ListItemText 
                primary="H∆∞·ªõng ph√°t tri·ªÉn c√° nh√¢n"
                secondary="L·ªùi khuy√™n ƒë·ªÉ ph√°t tri·ªÉn b·∫£n th√¢n v√† c·∫£i thi·ªán nh·ªØng ƒëi·ªÉm c√≤n h·∫°n ch·∫ø"
              />
            </ListItem>
          </List>
        </CardContent>
      </Card>

      <Divider sx={{ mb: 4 }} />

      {/* Start Button */}
      <Box textAlign="center">
        <Button
          variant="contained"
          size="large"
          onClick={handleStartTest}
          sx={{ 
            px: 6, 
            py: 2, 
            fontSize: '1.2rem',
            borderRadius: 2,
            boxShadow: 3,
          }}
        >
          B·∫Øt ƒë·∫ßu l√†m b√†i test
        </Button>
        <Typography variant="body2" color="text.secondary" sx={{ mt: 2 }}>
          Th·ªùi gian ∆∞·ªõc t√≠nh: {stats?.estimatedTime || 0} ph√∫t
        </Typography>
      </Box>
    </Container>
  );
}; 