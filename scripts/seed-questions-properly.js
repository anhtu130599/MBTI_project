const mongoose = require('mongoose');

const MONGODB_URI = process.env.MONGODB_URI || 'mongodb://localhost:27017/mbti_db';

// Question schema to match the model
const QuestionSchema = new mongoose.Schema({
  text: {
    type: String,
    required: true,
    trim: true,
  },
  options: [{
    id: {
      type: String,
      required: true,
    },
    text: {
      type: String,
      required: true,
      trim: true,
    },
    value: {
      type: String,
      required: true,
      enum: ['E', 'I', 'S', 'N', 'T', 'F', 'J', 'P'],
    },
  }],
  category: {
    type: String,
    required: true,
    enum: ['EI', 'SN', 'TF', 'JP'],
  },
}, {
  timestamps: true,
});

const Question = mongoose.model('Question', QuestionSchema);

// Sample questions with proper format (each option has unique ID)
const sampleQuestions = [
  {
    text: 'Khi b·∫°n ƒëi ƒë·∫øn m·ªôt n∆°i n√†o ƒë√≥ trong ng√†y, b·∫°n s·∫Ω:',
    options: [
      { id: 'q1_opt1', text: 'L√™n danh s√°ch c√°c c√¥ng vi·ªác v√† th·ªùi gian th·ª±c hi·ªán', value: 'J' },
      { id: 'q1_opt2', text: 'Nghƒ© ƒë·∫øn c√¥ng vi·ªác s·∫Ω l√†m r·ªìi ƒëi th√¥i', value: 'P' },
    ],
    category: 'JP',
  },
  {
    text: 'N·∫øu b·∫°n l√† m·ªôt gi√°o vi√™n, b·∫°n mu·ªën d·∫°y:',
    options: [
      { id: 'q2_opt1', text: 'C√°c kh√≥a h·ªçc th·ª±c nghi·ªám (th·ª±c t·∫ø)', value: 'S' },
      { id: 'q2_opt2', text: 'C√°c kh√≥a h·ªçc li√™n quan ƒë·∫øn l√Ω thuy·∫øt', value: 'N' },
    ],
    category: 'SN',
  },
  {
    text: 'Th∆∞·ªùng th√¨ b·∫°n c√≥ ph·∫£i l√† m·ªôt ng∆∞·ªùi:',
    options: [
      { id: 'q3_opt1', text: 'Ch·ªß ƒë·ªông giao l∆∞u/giao ti·∫øp', value: 'E' },
      { id: 'q3_opt2', text: 'Tr·∫ßm t√≠nh v√† d√® d·∫∑t', value: 'I' },
    ],
    category: 'EI',
  },
  {
    text: 'B·∫°n th∆∞·ªùng xuy√™n h√†nh ƒë·ªông theo:',
    options: [
      { id: 'q4_opt1', text: 'C·∫£m t√≠nh, tr√°i tim s·∫Ω ƒë∆∞a ra quy·∫øt ƒë·ªãnh', value: 'F' },
      { id: 'q4_opt2', text: 'L√Ω tr√≠, suy nghƒ© logic r·ªìi quy·∫øt ƒë·ªãnh', value: 'T' },
    ],
    category: 'TF',
  },
  {
    text: 'Khi l√†m nh·ªØng vi·ªác m√† nhi·ªÅu ng∆∞·ªùi kh√°c v·∫´n th∆∞·ªùng hay l√†m, th√¨ √Ω n√†o h·∫•p d·∫´n b·∫°n h∆°n:',
    options: [
      { id: 'q5_opt1', text: 'Ph√°t tri·ªÉn theo c√°ch ri√™ng c·ªßa b·∫°n', value: 'N' },
      { id: 'q5_opt2', text: 'L√†m theo c√°ch truy·ªÅn th·ªëng', value: 'S' },
    ],
    category: 'SN',
  },
  {
    text: 'Trong nh√≥m b·∫°n b√®, b·∫°n l√† ng∆∞·ªùi:',
    options: [
      { id: 'q6_opt1', text: 'N·∫Øm b·∫Øt tin t·ª©c v·ªÅ m·ªçi ng∆∞·ªùi', value: 'E' },
      { id: 'q6_opt2', text: 'L√† m·ªôt trong nh·ªØng ng∆∞·ªùi cu·ªëi c√πng bi·∫øt chuy·ªán', value: 'I' },
    ],
    category: 'EI',
  },
  {
    text: '√ù t∆∞·ªüng vi·ªác l·∫≠p danh s√°ch nh·ªØng vi·ªác b·∫°n c·∫ßn ho√†n th√†nh v√†o cu·ªëi tu·∫ßn:',
    options: [
      { id: 'q7_opt1', text: 'H·∫•p d·∫´n v·ªõi b·∫°n', value: 'J' },
      { id: 'q7_opt2', text: 'B·∫°n r·∫•t ch√°n n·∫£n v·ªõi n√≥', value: 'P' },
    ],
    category: 'JP',
  },
  {
    text: 'Khi b·∫°n c√≥ m·ªôt c√¥ng vi·ªác ƒë·∫∑c bi·ªát ƒë·ªÉ l√†m, b·∫°n mu·ªën:',
    options: [
      { id: 'q8_opt1', text: 'L√™n k·∫ø ho·∫°ch c·∫©n th·∫≠n tr∆∞·ªõc khi b·∫Øt ƒë·∫ßu', value: 'J' },
      { id: 'q8_opt2', text: 'T√¨m ra nh·ªØng ƒëi·ªÅu c·∫ßn thi·∫øt trong qu√° tr√¨nh', value: 'P' },
    ],
    category: 'JP',
  },
  {
    text: 'B·∫°n c√≥ xu h∆∞·ªõng:',
    options: [
      { id: 'q9_opt1', text: 'M·ªü r·ªông t√¨nh b·∫°n v·ªõi nhi·ªÅu ng∆∞·ªùi', value: 'E' },
      { id: 'q9_opt2', text: 'K·∫øt b·∫°n v·ªõi r·∫•t √≠t ng∆∞·ªùi nh∆∞ng s√¢u s·∫Øc', value: 'I' },
    ],
    category: 'EI',
  },
  {
    text: 'B·∫°n h√¢m m·ªô nh·ªØng ng∆∞·ªùi:',
    options: [
      { id: 'q10_opt1', text: 'Kh√° b√¨nh th∆∞·ªùng, kh√¥ng g√¢y ch√∫ √Ω', value: 'S' },
      { id: 'q10_opt2', text: 'Qu√° l·∫≠p d·ªã, kh√¥ng b·∫≠n t√¢m kh√°c ng∆∞·ªùi', value: 'N' },
    ],
    category: 'SN',
  },
  {
    text: 'B·∫°n c√≥ th√≠ch:',
    options: [
      { id: 'q11_opt1', text: 'S·∫Øp x·∫øp bu·ªïi d√£ ngo·∫°i thu·∫≠n l·ª£i nh·∫•t', value: 'J' },
      { id: 'q11_opt2', text: 'T·ª± do l√†m b·∫•t c·ª© ƒëi·ªÅu g√¨ t√πy th·ªùi ƒëi·ªÉm', value: 'P' },
    ],
    category: 'JP',
  },
  {
    text: 'B·∫°n th∆∞·ªùng quan h·ªá t·ªët v·ªõi:',
    options: [
      { id: 'q12_opt1', text: 'Ng∆∞·ªùi suy nghƒ© th·ª±c t·∫ø', value: 'S' },
      { id: 'q12_opt2', text: 'Ng∆∞·ªùi m∆° m·ªông (t∆∞·ªüng t∆∞·ª£ng)', value: 'N' },
    ],
    category: 'SN',
  },
  {
    text: 'Khi l√† th√†nh vi√™n m·ªôt nh√≥m, b·∫°n th∆∞·ªùng:',
    options: [
      { id: 'q13_opt1', text: 'Tham gia v√†o cu·ªôc n√≥i chuy·ªán c·ªßa nh√≥m', value: 'E' },
      { id: 'q13_opt2', text: 'Ng·ªìi t∆∞·ªüng t∆∞·ª£ng m·ªôt m√¨nh', value: 'I' },
    ],
    category: 'EI',
  },
  {
    text: 'B·∫°n mu·ªën ƒë∆∞·ª£c g·ªçi l√†:',
    options: [
      { id: 'q14_opt1', text: 'Ng∆∞·ªùi ƒëa c·∫£m', value: 'F' },
      { id: 'q14_opt2', text: 'Ng∆∞·ªùi l√Ω tr√≠', value: 'T' },
    ],
    category: 'TF',
  },
  {
    text: 'Khi ƒë·ªçc ƒë·ªÉ gi·∫£i tr√≠, b·∫°n th√≠ch:',
    options: [
      { id: 'q15_opt1', text: 'C√°ch vi·∫øt ph√° c√°ch, truy·ªÅn th·ªëng', value: 'S' },
      { id: 'q15_opt2', text: 'T√°c gi·∫£ vi·∫øt ch√≠nh x√°c nh·ªØng g√¨ h·ªç nghƒ©', value: 'N' },
    ],
    category: 'SN',
  },
  {
    text: 'B·∫°n c√≥ th·ªÉ d·ªÖ d√†ng n√≥i chuy·ªán th·∫≠t l√¢u v·ªõi:',
    options: [
      { id: 'q16_opt1', text: 'H·∫ßu h·∫øt t·∫•t c·∫£ m·ªçi ng∆∞·ªùi', value: 'E' },
      { id: 'q16_opt2', text: 'Ch·ªâ m·ªôt v√†i ng∆∞·ªùi nh·∫•t ƒë·ªãnh', value: 'I' },
    ],
    category: 'EI',
  },
  {
    text: 'Vi·ªác tu√¢n th·ªß/l√†m theo m·ªôt th·ªùi kh√≥a bi·ªÉu c√≥:',
    options: [
      { id: 'q17_opt1', text: 'Thu h√∫t/h·∫•p d·∫´n b·∫°n', value: 'J' },
      { id: 'q17_opt2', text: 'Khi·∫øn b·∫°n c·∫£m th·∫•y b·ªã g√≤ b√≥', value: 'P' },
    ],
    category: 'JP',
  },
  {
    text: 'Khi ƒë∆∞·ª£c ·ªßy nhi·ªám l√†m ƒëi·ªÅu g√¨ ƒë√≥ v√†o th·ªùi ƒëi·ªÉm nh·∫•t ƒë·ªãnh, b·∫°n c·∫£m th·∫•y:',
    options: [
      { id: 'q18_opt1', text: 'T·ªët ƒë·ªÉ l·∫≠p k·∫ø ho·∫°ch ph√π h·ª£p', value: 'J' },
      { id: 'q18_opt2', text: 'Kh√≥ ch·ªãu v√¨ b·ªã r√†ng bu·ªôc', value: 'P' },
    ],
    category: 'JP',
  },
  {
    text: 'B·∫°n th√†nh c√¥ng h∆°n khi:',
    options: [
      { id: 'q19_opt1', text: 'C·∫©n th·∫≠n l√†m theo k·∫ø ho·∫°ch', value: 'J' },
      { id: 'q19_opt2', text: 'ƒê·ªëi ph√≥ v·ªõi b·∫•t ng·ªù, linh ho·∫°t', value: 'P' },
    ],
    category: 'JP',
  },
  {
    text: 'B·∫°n mu·ªën ƒë∆∞·ª£c coi l√†:',
    options: [
      { id: 'q20_opt1', text: 'Ng∆∞·ªùi th·ª±c t·∫ø, th·ª±c d·ª•ng', value: 'S' },
      { id: 'q20_opt2', text: 'Ng∆∞·ªùi kh√©o l√©o, m∆∞u tr√≠', value: 'N' },
    ],
    category: 'SN',
  },
];

async function seedQuestions() {
  try {
    await mongoose.connect(MONGODB_URI);
    console.log('‚úÖ Connected to MongoDB');
    
    // Clear existing questions
    await Question.deleteMany({});
    console.log('üóëÔ∏è Cleared existing questions');
    
    // Insert new questions
    const insertedQuestions = await Question.insertMany(sampleQuestions);
    console.log(`‚úÖ Inserted ${insertedQuestions.length} questions`);
    
    // Verify questions structure
    console.log('\nüìã Sample question structure:');
    const firstQuestion = await Question.findOne();
    console.log('Question ID:', firstQuestion._id.toString());
    console.log('Question text:', firstQuestion.text);
    console.log('Options:');
    firstQuestion.options.forEach((opt, index) => {
      console.log(`  ${index + 1}. ID: ${opt.id}, Text: ${opt.text}, Value: ${opt.value}`);
    });
    console.log('Category:', firstQuestion.category);
    
    console.log('\nüéØ Questions seeded successfully!');
    console.log('Now test the MBTI calculation should work properly.');
    
  } catch (error) {
    console.error('‚ùå Error seeding questions:', error);
  } finally {
    await mongoose.connection.close();
  }
}

seedQuestions(); 